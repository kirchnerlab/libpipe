/*
 * Pipeline.hpp
 *
 * Copyright (c) 2011 David Sichau
 *                    Marc Kirchner
 */

#ifndef __LIBPIPE_INCLUDE_LIBPIPE_RTC_PIPELINE_HPP__
#define __LIBPIPE_INCLUDE_LIBPIPE_RTC_PIPELINE_HPP__

#include <libpipe/config.hpp>

#include <libpipe/Request.hpp>
#include <libpipe/rtc/Filter.hpp>

#include <queue>

#include <boost/shared_ptr.hpp>

namespace libpipe {
namespace rtc {

class Pipeline
{
    public:
        Pipeline();
        ~Pipeline();

        /** Add a filter and request on top of the queue.
         * @param req The Request which will be processed by the filter
         * @param filter The filter which handles the request.
         */
        void push(Request const & req, boost::shared_ptr<Filter> filter);

        /** Will run all requests in the queue. This needs to be called to run Libpipe.
         */
        void run();

        /** Returns the trace which were generated by the individual requests.
         * @param trace [out] The trace of this libpipe pipeline.
         */
        void getTrace(std::vector<std::string>& trace);

    private:
        std::queue<boost::shared_ptr<Filter> > pipelineQueue_;

        std::queue<Request> requestQueue_;

       std::vector<std::string> trace_;
};

} /* namespace rtc */
} /* namespace libpipe */
#endif /* __LIBPIPE_INCLUDE_LIBPIPE_RTC_PIPELINE_HPP__ */
